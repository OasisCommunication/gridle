{
  "version": 3,
  "sources": [
    "gridle.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "###\n# Gridle.js\n#\n# This little js file allow you to detect which or your gridle state is active, when states changes, etc...\n#\n# @author \tOlivier Bossel <olivier.bossel@gmail.com>\n# @created \t20.05.14\n# @updated \t09.10.15\n# @version \t1.0.14\n###\n((factory) ->\n    if typeof define == 'function' and define.amd\n        # AMD. Register as an anonymous module.\n        define [ ], factory\n    else if typeof exports == 'object'\n        # Node/CommonJS\n        factory()\n    else\n        # Browser globals\n        factory()\n    return\n) () ->\n\n    ###\n    Little smokesignals implementation\n    ###\n    smokesignals =\n        convert : (obj, handlers) ->\n            handlers = {}\n            obj.on = (eventName, handler) ->\n                (handlers[eventName] = handlers[eventName] || []).push handler\n                return obj\n            obj.emit = (eventName) ->\n                return if not handlers[eventName]\n                for handler in handlers[eventName]\n                    handler.apply obj, Array.prototype.slice.call(arguments, 1)\n                    continue\n                return obj\n            return obj\n\n    ###\n    Gridle.js\n    ###\n    window.Gridle =\n\n        # store if already initialised or not\n        _inited : false\n\n        # save the ready status\n        # this will be true when the states are finded or if no states exists in css (if gridle is not used)\n        _isReady : false\n\n        # save the states finded in css\n        _statesInCss : null\n\n        # boolean to save when the states are finded in css\n        # this is used to stop search when the states are finded\n        _statesFindedInCss : false,\n\n        # settings finded in css (getted by an ajax request)\n        _cssSettings : []\n\n        # store states\n        _states : []\n        _activeStates : []\n        _activeStatesNames : []\n        _inactiveStates : [],\n        _inactiveStatesNames : [],\n        _updatedStates : [],\n        _updatedStatesNames : [],\n\n        # resize timeout to not update every ms on resize\n        resizeTimeout : null,\n\n        # default settings that can be overrided on init\n        _settings :\n            onUpdate : null\n            debug : null\n            ignoredStates : []\n\n        ###\n        Init\n        ###\n        init : (settings) ->\n\n            # update inited status\n            @_inited = true\n\n            # process settings\n            if settings?.ignoredStates? and (default_index = settings.ignoredStates.indexOf 'default') > -1\n                settings.ignoredStates.splice default_index, 1\n\n            @_settings = @_extend @_settings, settings if settings\n\n            @_debug 'waiting for content to be fully loaded'\n\n            domLoaded () =>\n                @_parseCss()\n\n        ###\n        Extending object function\n        ###\n        _extend : (object, properties) ->\n            for key, val of properties\n                object[key] = val\n            object\n\n        ###\n        Load and parse css\n        ###\n        _parseCss : () ->\n            return undefined if @_statesFindedInCss\n\n            # try to find gridle settings\n            i = 0\n            j = document.styleSheets.length\n            settings_found = false\n            while i < j\n                try\n                    rules = document.styleSheets[i].cssText or document.styleSheets[i].cssRules or document.styleSheets[i].rules\n                    if typeof rules is 'string'\n                        # try to find settings in css\n                        settings = rules.match(/#gridle-settings(?:\\s*)\\{(?:\\s*)content(?:\\s*):(?:\\s*)\\\"(.+)\\\"(;\\s*|\\s*)\\}/) && RegExp.$1;\n                        if settings\n                            # parse settings to json\n                            settings = settings.toString().replace(/\\\\/g,'');\n                            settings = JSON.parse settings;\n                            @_cssSettings = settings;\n                            settings_found = true\n                            @_cssSettings = settings\n                            @_statesInCss = settings.states\n                    else\n                        for idx, rule of rules\n                            if /#gridle-settings/.test(rule.cssText)\n                                settings = rule.cssText.toString().match(/:(.*);/) && RegExp.$1;\n                                settings = settings.toString().replace(/\\\\/g,'');\n                                settings = settings.trim()\n                                settings = settings.substr(1)\n                                settings = settings.substr(0,settings.length-1)\n                                settings = JSON.parse settings;\n                                if settings?.states?\n                                    @_cssSettings = settings\n                                    @_statesInCss = settings.states\n                                    settings_found = true\n                                    continue\n                catch e\n                    if e.name != 'SecurityError'\n                        throw e\n                i++\n\n            @_statesFindedInCss = settings_found\n            # process states\n            if @_statesInCss\n                @_processFindedStates()\n            else\n                @_debug \"no states found...\"\n\n        ###\n        Process finded states\n        ###\n        _processFindedStates : ->\n\n            @_debug 'begin process finded states in css'\n\n            # loop on each states\n            for name, query of @_statesInCss\n\n                if @_settings.ignoredStates.indexOf(name) == -1\n                    # register a state\n                    @_registerState name, query\n\n            # launch the app\n            @_launch()\n\n        ###\n        Launch\n        ###\n        _launch : ->\n            firstReady = !@_isReady\n\n            @_debug 'launch'\n\n            # mark app as ready\n            @_isReady = true\n\n            # emit ready event\n            @_crossEmit 'ready' if firstReady\n\n            # listen for window resize\n            @_addEvent window, 'resize', (e) =>\n                clearTimeout @resizeTimeout\n                @resizeTimeout = setTimeout =>\n                    @_onResize()\n                , 100\n\n            #trigger first resize\n            @_onResize()\n\n        ###\n        On window resize\n        ###\n        _onResize : ->\n\n            # track updated states\n            updatedStates = []\n\n            # update states status\n            @_updateStatesStatus()\n\n            # debug\n            @_debug 'active states', @getActiveStatesNames().join(',') if @getActiveStatesNames().length\n            @_debug 'inactive states', @getInactiveStatesNames().join(',') if @getInactiveStatesNames().length\n            @_debug 'updated states', @getUpdatedStatesNames().join(',') if @getUpdatedStatesNames().length\n\n        ###\n        Register a state\n        ###\n        _registerState : (name, state, updateOnResize) ->\n\n            # make info object\n            infos =\n                name : name\n                query : state.query\n                settings : state\n                status : null\n                previous_status : null\n                updateOnResize : if updateOnResize? then updateOnResize else true\n\n            # push new state\n            @_states.push infos\n\n            @_debug '|--- register state', name, infos\n\n        ###\n        Update states status\n        ###\n        _updateStatesStatus : ->\n\n            # check if was default state\n            defaultState = @getDefaultState()\n            defaultStateIdx = @_states.indexOf defaultState\n            wasDefault = defaultState.status\n\n            # reset trackings arrays\n            @_activeStates = [];\n            @_activeStatesNames = [];\n            @_inactiveStates = [];\n            @_inactiveStatesNames = [];\n            @_updatedStates = [];\n            @_updatedStatesNames = [];\n\n            # loop on each states\n            for key, state of @_states\n\n                # do not take care if not update on resize\n                continue if not state.updateOnResize\n\n                # save status\n                @_states[key].previous_status = state.status\n\n                # check is state is active\n                if @_validateState state\n\n                    # check is status has changed\n                    if not @_states[key].status\n\n                        # save this state has changed one\n                        @_updatedStates.push state\n                        @_updatedStatesNames.push state.name\n\n                    # update status\n                    @_states[key].status = true\n\n                    # add in active state\n                    @_activeStates.push state\n                    @_activeStatesNames.push state.name\n\n                # the state is not active\n                else if state.name != 'default'\n\n                    # check is status has changed\n                    if @_states[key].status\n\n                        # add state in changed ones\n                        @_updatedStates.push state\n                        @_updatedStatesNames.push state.name\n\n                    # update status\n                    @_states[key].status = false\n\n                    # add state in unactives\n                    @_inactiveStates.push state\n                    @_inactiveStatesNames.push state.name\n\n            # if no states are active, set the default one\n            if not @_activeStates.length\n                @_states[defaultStateIdx].status = true\n                @_activeStates.push defaultState\n                @_activeStatesNames.push 'default'\n                if not wasDefault\n                    @_updatedStates.push defaultState\n                    @_updatedStatesNames.push 'default'\n            else\n                @_states[defaultStateIdx].status = false\n                @_inactiveStates.push defaultState\n                @_inactiveStatesNames.push 'default'\n                if wasDefault\n                    @_updatedStates.push defaultState\n                    @_updatedStatesNames.push 'default'\n\n            # trigger events if needed\n            @_crossEmit 'update', @_updatedStates, @_activeStates, @_inactiveStates if @_updatedStates.length\n            @_settings.onUpdate @_updatedStates, @_activeStates, @_inactiveStates if @_updatedStates.length and @_settings.onUpdate\n\n        ###\n        Validate state\n        ###\n        _validateState : (state) =>\n\n            # validate state using matchmedia\n            return matchMedia(state.query).matches\n\n        ###\n        Add event\n        ###\n        _addEvent : (elm, type, handler) ->\n\n            # check params\n            return false if not elm\n\n            # if addeventlistener exist\n            if elm.addEventListener\n                elm.addEventListener type, handler, false\n            else if elm.attachEvent\n                elm.attachEvent 'on'+type, handler\n            else\n                elm['on'+type] = handler\n\n        ###\n        Cross emit for supporting jquery libs, etc...\n        ###\n        _crossEmit : (eventName) ->\n\n            # jquery\n            if jQuery?\n                # trigger event on Gridle object\n                jQuery(@).trigger eventName, Array.prototype.slice.call(arguments, 1)\n                # trigget event trough the body\n                jQuery('body').trigger('gridle.'+eventName, Array.prototype.slice.call(arguments, 1))\n\n            # emit from smokesignals\n            @emit.apply @, arguments\n\n        ###\n        Ajax proxy\n        ###\n        _ajax : (opts) ->\n\n            # process arguments\n            args =\n                type : opts.type || 'GET'\n                url : opts.url\n                success : opts.success\n                error : opts.error\n                dataType : opts.dataType || 'text'\n                context : opts.context\n\n            # create http request object\n            http = new XMLHttpRequest;\n\n            # set context\n            http.context = args.context if args.context\n\n            # open connexion\n            http.open args.type, args.url, true\n\n            # listen state change\n            http.onreadystatechange = ->\n\n                # do not care if the state is not success\n                return false if http.readyState != 4\n\n                # check response status\n                switch http.status\n\n                    # when success\n                    when 200\n\n                        # switch on dataType to send back correct response\n                        switch args.dataType\n\n                            when 'json'\n                                response = JSON.parse http.responseText\n                            else\n                                response = http.responseText\n\n                        # call success callback if exist\n                        args.success response, http.status, http if args.success\n            # send request\n            http.send()\n\n        ###\n        Get default state\n        ###\n        getDefaultState : ->\n            for state in @getRegisteredStates()\n                return state if state.name is 'default'\n\n        ###\n        Get registered states\n        ###\n        getRegisteredStates : -> @_states\n\n        ###\n        Get changes states\n        ###\n        getUpdatedStates : -> @_updatedStates\n\n        ###\n        Get changes states names\n        ###\n        getUpdatedStatesNames : -> @_updatedStatesNames\n\n        ###\n        Get active states\n        ###\n        getActiveStates : -> @_activeStates\n\n        ###\n        Get active states names\n        ###\n        getActiveStatesNames : -> @_activeStatesNames\n\n        ###\n        Get unactive states\n        ###\n        getInactiveStates : -> @_inactiveStates\n\n        ###\n        Get unactive states names\n        ###\n        getInactiveStatesNames : -> @_inactiveStatesNames\n\n        ###\n        Check is a state is active\n        ###\n        isActive : (stateName) ->\n\n            # isActive\n            isActive = false;\n\n            # loop on each active states\n            for index, name of @_activeStatesNames\n                isActive = true if stateName == name\n\n            # return if is active or not\n            return isActive\n\n        ###\n        Check if gridle is ready\n        ###\n        isReady : ->\n            return @_isReady\n\n\n        ###\n        Debug\n        ###\n        _debug : ->\n            console.log 'GRIDLE', arguments if @_settings.debug\n\n\n    ###\n    # DomLoaded\n    ###\n    _domLoaded = false\n    domLoaded = (callback) ->\n\n        _loaded = (callback) ->\n\n            if _domLoaded\n                callback()\n                return\n\n            if document.readyState is 'complete'\n                _domLoaded = true\n                callback()\n                return\n\n            `/* Internet Explorer */\n            /*@cc_on\n            @if (@_win32 || @_win64)\n                document.write('<script id=\"ieScriptLoad\" defer src=\"//:\"><\\/script>');\n                document.getElementById('ieScriptLoad').onreadystatechange = function() {\n                    if (this.readyState == 'complete') {\n                        _domLoaded = true;\n                        callback();\n                    }\n                };\n            @end @*/\n            /* Mozilla, Chrome, Opera */\n            if (document.addEventListener) {\n                document.addEventListener('DOMContentLoaded', function() {\n                    _domLoaded = true;\n                    callback();\n                }, false);\n            }\n            /* Safari, iCab, Konqueror */\n            if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n                var DOMLoadTimer = setInterval(function () {\n                    if (/loaded|complete/i.test(document.readyState)) {\n                        _domLoaded = true;\n                        callback();\n                        clearInterval(DOMLoadTimer);\n                    }\n                }, 10);\n            }\n            /* Other web browsers */\n            window.onload = function() {\n                _domLoaded = true;\n                callback();\n            };`\n            return\n\n        if window.addEventListener\n            window.addEventListener 'load', () =>\n                _domLoaded = true\n                callback()\n            , false\n        else\n            window.attachEvent 'onload', () =>\n                _domLoaded = true\n                callback()\n        _loaded () =>\n            callback()\n\n    # make gridle event dipatcher\n    smokesignals.convert window.Gridle\n\n    # init if not already done :\n    domLoaded () ->\n        setTimeout ->\n            Gridle.init() if not Gridle._inited\n        , 500\n\n    # return the gridle object\n    Gridle\n"
  ],
  "sourceRoot": "../coffee/"
}